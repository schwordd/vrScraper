name: Build, Tag, and Release

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'vrScraper/VERSION'  # Ignore commits that only change the VERSION file

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history including tags

    - name: Set up Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

    - name: Fetch all tags
      run: git fetch --tags

    - name: Determine next version
      id: vars
      run: |
        echo "Determining the latest tag..."
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"

        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          NEXT_VERSION="1.0.0"
        else
          VERSION_PARTS=(${LATEST_TAG//v/ })
          VERSION_PARTS=(${VERSION_PARTS//./ })
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment the PATCH version until a unique tag is found
          PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          while git rev-parse "v$NEXT_VERSION" >/dev/null 2>&1; do
            PATCH=$((PATCH + 1))
            NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          done
        fi

        echo "Determined next version: $NEXT_VERSION"
        echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

    - name: Update version file
      run: |
        echo "Updating version file..."
        echo "$NEXT_VERSION" > vrScraper/VERSION

    - name: Commit updated version file
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Use PAT instead of the default GITHUB_TOKEN
      run: |
        git add vrScraper/VERSION
        git commit -m "Update version to $NEXT_VERSION"
        git push origin master

    - name: Setup .NET 8 SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Build and Publish the project
      run: dotnet publish -c Release -r win-x64 --self-contained -o ./dist

    - name: Remove appsettings.Development.json
      run: |
        if [ -f "./dist/appsettings.Development.json" ]; then
          rm ./dist/appsettings.Development.json
          echo "Removed appsettings.Development.json"
        else
          echo "No appsettings.Development.json found, skipping removal"
        fi

    - name: Create ZIP archive
      run: |
        ARCHITECTURE="win-x64"
        ZIP_NAME="vrScraper_${ARCHITECTURE}_v${{ env.NEXT_VERSION }}.zip"
        cd dist
        zip -r ../$ZIP_NAME ./*
        cd ..
        echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        gh release create v${{ env.NEXT_VERSION }} ${{ env.ZIP_NAME }} --title "Release v${{ env.NEXT_VERSION }}" --notes "Automated release for version v${{ env.NEXT_VERSION }}"

    # Docker Build und Push
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/vrscraper:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/vrscraper:v${{ env.NEXT_VERSION }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vrscraper:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vrscraper:buildcache,mode=max
