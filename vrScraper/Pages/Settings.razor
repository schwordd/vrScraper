@page "/settings"

@using System.Text.Json
@using vrScraper.DB.Models
@using Blzr.BootstrapSelect
@using vrScraper.Services

@inject IVideoService VideoService
@inject ISettingService SettingService

<h3>Settings</h3>

<div style="min-height: 75vh;">

    <!-- Tag Blacklist Section -->
    <div class="tag-blacklist-section">
        <div class="section-header">
            <h4 class="section-title">
                <i class="fas fa-ban me-2"></i>
                Content Filtering
            </h4>
            <p class="section-description">
                Configure global content filters to customize your video collection
            </p>
        </div>

        <div class="setting-card">
            <label class="form-label fw-semibold mb-3">
                <i class="fas fa-filter me-1"></i>
                Global Tag Blacklist
            </label>
            <BootstrapSelect IsMultiple="true" TItem="DbTag" Data="@AvailableTags"
                             TextField="@((item) => item.Name)"
                             ValueField="@((item) => item.Name)"
                             ShowSearch="true"
                             TType="IEnumerable<string>"
                             @bind-Value="TagBlacklist" />
            <small class="form-text text-muted mt-2">
                Select tags that should be filtered out from all video listings and API responses
            </small>
        </div>
    </div>

    <hr class="my-4" />

    <!-- Scheduled Scraping Settings -->
    <div class="scheduled-scraping-section">
        <div class="section-header">
            <h4 class="section-title">
                <i class="fas fa-clock me-2"></i>
                Automated Daily Scraping
            </h4>
            <p class="section-description">
                Configure automatic daily scraping to keep your collection up-to-date
            </p>
        </div>

        <div class="settings-grid">
            <div class="setting-card">
                <div class="setting-header">
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="scheduledScrapingEnabled" @bind="ScheduledScrapingEnabled" />
                        <label class="form-check-label fw-semibold" for="scheduledScrapingEnabled">
                            Enable Automated Daily Scraping
                        </label>
                    </div>
                </div>
                <small class="text-muted">
                    Automatically scrape new videos daily until a known video is found
                </small>
            </div>

            <div class="setting-card">
                <label class="form-label fw-semibold" for="scheduledScrapingTime">
                    <i class="fas fa-clock me-1"></i>
                    Scraping Time
                </label>
                <input type="text" class="form-control form-control-lg" id="scheduledScrapingTime" 
                       @bind="ScheduledScrapingTime" placeholder="HH:MM (e.g., 02:00)" />
                <small class="form-text text-muted">
                    Time when daily scraping should start (24h format)
                </small>
            </div>

            <div class="setting-card">
                <label class="form-label fw-semibold" for="scheduledScrapingMaxPages">
                    <i class="fas fa-shield-alt me-1"></i>
                    Maximum Pages per Run
                </label>
                <input type="number" class="form-control form-control-lg" id="scheduledScrapingMaxPages" 
                       @bind="ScheduledScrapingMaxPages" min="1" max="100" />
                <small class="form-text text-muted">
                    Safety limit to prevent infinite scraping (recommended: 50)
                </small>
            </div>

            <div class="setting-card status-card">
                <label class="form-label fw-semibold">
                    <i class="fas fa-info-circle me-1"></i>
                    Last Scheduled Scrape
                </label>
                <div class="status-value">
                    @if (string.IsNullOrEmpty(LastScheduledScrape))
                    {
                        <span class="badge bg-secondary">Never</span>
                    }
                    else
                    {
                        <span class="badge bg-success">@LastScheduledScrape</span>
                    }
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    private List<DbTag> AvailableTags { get; set; } = new();
    private List<DbSetting> AllSettings { get; set; } = new();

    public IEnumerable<string> TagBlacklist
    {
        get
        {
            var s = AllSettings.Single(s => s.Key == "TagBlacklist");
            return JsonSerializer.Deserialize<List<string>>(s.Value)!;
        }

        set
        {
            var s = AllSettings.Single(s => s.Key == "TagBlacklist");
            s.Value = JsonSerializer.Serialize(value);
            this.SettingService.UpdateSetting(s);
        }
    }

    public bool ScheduledScrapingEnabled
    {
        get
        {
            var s = AllSettings.Single(s => s.Key == "ScheduledScrapingEnabled");
            return bool.TryParse(s.Value, out bool result) && result;
        }
        set
        {
            var s = AllSettings.Single(s => s.Key == "ScheduledScrapingEnabled");
            s.Value = value.ToString();
            this.SettingService.UpdateSetting(s);
        }
    }

    public string ScheduledScrapingTime
    {
        get
        {
            var s = AllSettings.Single(s => s.Key == "ScheduledScrapingTime");
            return s.Value;
        }
        set
        {
            var s = AllSettings.Single(s => s.Key == "ScheduledScrapingTime");
            s.Value = value;
            this.SettingService.UpdateSetting(s);
        }
    }

    public int ScheduledScrapingMaxPages
    {
        get
        {
            var s = AllSettings.Single(s => s.Key == "ScheduledScrapingMaxPages");
            return int.TryParse(s.Value, out int result) ? result : 50;
        }
        set
        {
            var s = AllSettings.Single(s => s.Key == "ScheduledScrapingMaxPages");
            s.Value = value.ToString();
            this.SettingService.UpdateSetting(s);
        }
    }

    public string LastScheduledScrape
    {
        get
        {
            var s = AllSettings.Single(s => s.Key == "LastScheduledScrape");
            return s.Value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTags();
        await LoadSettings();
    }

    private async Task LoadTags()
    {
        AvailableTags = (await VideoService.GetTagInfos()).Select(x => x.Tag).ToList();
    }

    private async Task LoadSettings()
    {
        AllSettings = (await SettingService.GetAllSettings()).ToList();
    }
}
