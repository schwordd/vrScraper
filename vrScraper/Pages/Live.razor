@page "/live"

@using vrScraper.DB.Models
@using vrScraper.Services
@inject IVideoService VideoService
@using Blzr.BootstrapSelect

@if (LiveVideo != null)
{
    <div class="video-item">

        @if (LiveVideo.Tags != null)
        {
            <div class="tag-container">
                @foreach (var tag in LiveVideo.Tags)
                {
                    <button type="button" class="btn btn-primary tag-pill">
                        @tag.Name
                    </button>
                }
            </div>
        }

        @if (LiveVideo.Stars != null)
        {
            <div class="star-container">
                @foreach (var star in LiveVideo.Stars)
                {
                    <button type="button" class="btn btn-primary star-pill">
                        @star.Name
                    </button>
                }
            </div>
        }

        <img class="live-image" src="@LiveVideo.Thumbnail" alt="@LiveVideo.Title" />
        <h3 class="live-title">@LiveVideo.Title</h3>

        <div class="rate-buttons">
            <button class="@(LiveVideo.Liked ? "btn btn-success btn-block active" : "btn btn-success btn-block")" @onclick="Like">Like</button>
            <button class="@(LiveVideo.Disliked ? "btn btn-danger btn-block active" : "btn btn-danger btn-block")" @onclick="Dislike">Dislike</button>
        </div>
    </div>
}

@code {

    public DbVideoItem? LiveVideo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.FromResult(0);

        this.LiveVideo = this.VideoService.CurrentLiveVideo;
        this.VideoService.OnLiveVideoChanged += (s, e) =>
        {
            this.LiveVideo = e.Video;
            InvokeAsync(StateHasChanged);
        };
    }

    private void Like()
    {
        if (this.LiveVideo == null) return;
        this.LiveVideo = this.VideoService.LikeVideo(this.LiveVideo);
        InvokeAsync(StateHasChanged);
    }

    private void Dislike()
    {
        if (this.LiveVideo == null) return;
        this.LiveVideo = this.VideoService.DislikeVideo(this.LiveVideo);
        InvokeAsync(StateHasChanged);
    }

    private void Fav()
    {
        if (this.LiveVideo == null) return;
        this.LiveVideo = this.VideoService.FavVideo(this.LiveVideo);
        InvokeAsync(StateHasChanged);
    }
}

