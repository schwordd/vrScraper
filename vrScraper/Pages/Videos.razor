@page "/videos"

@using Newtonsoft.Json
@using vrScraper.DB
@using vrScraper.DB.Models
@using vrScraper.Services
@using Microsoft.EntityFrameworkCore
@using vrScraper.Components

@inject IVideoService VideoService
@inject ISettingService SettingService
@inject IEpornerScraper scraper
@inject VrScraperContext context
@inject IJSRuntime JSRuntime
@inject IServiceProvider serviceProvider

@using Blzr.BootstrapSelect

<div style="min-height: 75vh; display: flex; flex-direction: column;">

    <div class="filters">
        <div class="filter-container">
            <div class="filter-section">
                <span class="filter-item">Total items: @TotalItems</span>

                <span class="filter-item">
                    <label for="sort">Sort by:</label>
                    <select class="form-select" @bind="CurrentSortOption" style="width: auto;">
                        <option value="latest">Latest</option>
                        <option value="rating">Rating</option>
                        <option value="random">Random</option>
                        <option value="playtime">Most played time</option>
                    </select>
                </span>

                <span class="filter-item">
                    <input class="form-check-input" type="checkbox" @bind="ShowOnlyLiked" id="showLikedCheck">
                    <label class="form-check-label" for="showLikedCheck">Show only liked</label>
                </span>

                <span class="filter-item">
                    <input class="form-check-input" type="checkbox" @bind="ShowOnlyUnwatched" id="showUnwatchedCheck">
                    <label class="form-check-label" for="showUnwatchedCheck">Show only unwatched</label>
                </span>

                <span class="filter-item">
                    <input class="form-check-input" type="checkbox" @bind="ShowOnlyWithErrors" id="showErrorsCheck">
                    <label class="form-check-label" for="showErrorsCheck">Show only with errors</label>
                </span>

                <span class="filter-item">
                    <label for="tags">Tags:</label>
                    <div class="d-flex align-items-center gap-2">
                        <BootstrapSelect IsMultiple="true"
                                        TItem="(DbTag Tag, long Count)"
                                        Data="@SortedTags"
                                        TextField="@((item) => $"{item.Tag.Name} ({item.Count})")"
                                        ValueField="@((item) => item.Tag.Name)"
                                        ShowSearch="true"
                                        TType="IEnumerable<string>"
                                        @bind-Value="@SelectedTagValues" />
                        <button class="btn btn-sm btn-clear" @onclick="ClearTags" disabled="@(SelectedTags.Count == 0)" title="Clear tags">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                </span>

                <span class="filter-item">
                    <label for="actresses">Actresses:</label>
                    <div class="d-flex align-items-center gap-2">
                        <BootstrapSelect IsMultiple="true"
                                        TItem="(DbStar Star, long Count)"
                                        Data="@SortedActresses"
                                        TextField="@((item) => $"{item.Star.Name} ({item.Count})")"
                                        ValueField="@((item) => item.Star.Name)"
                                        ShowSearch="true"
                                        TType="IEnumerable<string>"
                                        @bind-Value="@SelectedActressesValues" />
                        <button class="btn btn-sm btn-clear" @onclick="ClearActresses" disabled="@(SelectedActresses.Count == 0)" title="Clear actresses">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                </span>
            </div>
        </div>
    </div>

    <div class="content-wrapper">
        <div class="pager-info">
            <div class="pager">
                <button class="btn btn-sm btn-outline-primary" @onclick="PreviousPage" disabled="@IsFirstPage">
                    <i class="bi bi-chevron-left"></i>
                </button>

                @{
                    const int maxVisiblePages = 5;
                    var startPage = Math.Max(1, CurrentPage - maxVisiblePages / 2);
                    var endPage = Math.Min(TotalPages, startPage + maxVisiblePages - 1);

                    if (startPage > 1)
                    {
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => GoToPage(1)">1</button>
                        if (startPage > 2)
                        {
                            <span class="page-ellipsis">...</span>
                        }
                    }

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        var pageNumber = i;
                        <button class="btn btn-sm @(pageNumber == CurrentPage ? "btn-primary" : "btn-outline-primary")"
                                @onclick="() => GoToPage(pageNumber)">
                            @pageNumber
                        </button>
                    }

                    if (endPage < TotalPages)
                    {
                        if (endPage < TotalPages - 1)
                        {
                            <span class="page-ellipsis">...</span>
                        }
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => GoToPage(TotalPages)">@TotalPages</button>
                    }
                }

                <button class="btn btn-sm btn-outline-primary" @onclick="NextPage" disabled="@IsLastPage">
                    <i class="bi bi-chevron-right"></i>
                </button>
            </div>
            <div class="page-size">
                <select class="form-select form-select-sm" @onchange="PageSizeChanged">
                    <option value="10" selected="@IsSelected(10)">10</option>
                    <option value="20" selected="@IsSelected(20)">20</option>
                    <option value="30" selected="@IsSelected(30)">30</option>
                    <option value="40" selected="@IsSelected(40)">40</option>
                    <option value="50" selected="@IsSelected(50)">50</option>
                    <option value="100" selected="@IsSelected(100)">100</option>
                </select>
                <span class="text-muted small">per page</span>
            </div>
        </div>

        <div class="video-gallery">
            @foreach (var item in PagedItems)
            {
                <div class="video-item">
                    <div class="thumbnail-container @(item.IsThumbnailNotAvailable == true ? "not-available" : "")"
                         @onclick="@(item.IsThumbnailNotAvailable == true ? null : (() => PlayVideo(item)))">
                        @{
                            if (string.IsNullOrEmpty(item.Thumbnail))
                            {
                                item.IsThumbnailNotAvailable = true;
                            }
                        }
                        <img src="@(string.IsNullOrEmpty(item.Thumbnail) ? "/images/thumbnail-not-available.svg" : item.Thumbnail)"
                             alt="@item.Title"
                             @onerror="e => HandleImageError(e, item)" />
                        @if (item.IsThumbnailNotAvailable != true)
                        {
                            <div class="play-overlay">
                                <i class="bi bi-play-circle-fill"></i>
                            </div>
                        }
                        <div class="thumbnail-overlay">
                            <button class="btn btn-danger btn-sm delete-btn" @onclick:stopPropagation="true" @onclick="() => DeleteVideo(item.Id)" title="Delete video">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <div class="like-btn-container">
                            <button class="like-btn @(item.Liked ? "liked" : "not-liked")"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => ToggleLike(item)"
                                    title="@(item.Liked ? "Entfernen von Favoriten" : "Zu Favoriten hinzufÃ¼gen")">
                                <i class="bi bi-heart-fill"></i>
                            </button>
                            <span class="play-count" title="Anzahl der Wiedergaben">
                                <i class="bi bi-play-fill"></i>
                                @item.PlayCount
                            </span>
                        </div>
                    </div>
                    <h3>@item.Title</h3>
                    <div class="tag-container">
                        @if (item.Stars != null)
                        {
                            @foreach (var starInfo in item.Stars)
                            {
                                <button type="button" class="btn btn-primary star-pill" @onclick="() => AddStarFilter(starInfo.Name)">
                                    @starInfo.Name
                                </button>
                            }
                        }

                        @if (item.Tags != null)
                        {
                            @foreach (var tagInfo in item.Tags)
                            {
                                <button type="button" class="btn btn-primary tag-pill" @onclick="() => AddTagFilter(tagInfo.Name)">
                                    @tagInfo.Name
                                </button>
                            }
                        }
                    </div>
                </div>
            }
        </div>

        <div class="pager-info">
            <div class="pager">
                <button class="btn btn-sm btn-outline-primary" @onclick="PreviousPage" disabled="@IsFirstPage">
                    <i class="bi bi-chevron-left"></i>
                </button>

                @{
                    if (startPage > 1)
                    {
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => GoToPage(1)">1</button>
                        if (startPage > 2)
                        {
                            <span class="page-ellipsis">...</span>
                        }
                    }

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        var pageNumber = i;
                        <button class="btn btn-sm @(pageNumber == CurrentPage ? "btn-primary" : "btn-outline-primary")"
                                @onclick="() => GoToPage(pageNumber)">
                            @pageNumber
                        </button>
                    }

                    if (endPage < TotalPages)
                    {
                        if (endPage < TotalPages - 1)
                        {
                            <span class="page-ellipsis">...</span>
                        }
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => GoToPage(TotalPages)">@TotalPages</button>
                    }
                }

                <button class="btn btn-sm btn-outline-primary" @onclick="NextPage" disabled="@IsLastPage">
                    <i class="bi bi-chevron-right"></i>
                </button>
            </div>
            <div class="page-size">
                <select class="form-select form-select-sm" @onchange="PageSizeChanged">
                    <option value="10" selected="@IsSelected(10)">10</option>
                    <option value="20" selected="@IsSelected(20)">20</option>
                    <option value="30" selected="@IsSelected(30)">30</option>
                    <option value="40" selected="@IsSelected(40)">40</option>
                    <option value="50" selected="@IsSelected(50)">50</option>
                    <option value="100" selected="@IsSelected(100)">100</option>
                </select>
                <span class="text-muted small">per page</span>
            </div>
        </div>
    </div>
</div>

<!-- Video-Player-Komponente hinzufÃ¼gen -->
<VideoPlayer @ref="VideoPlayerComponent" OnClose="HandlePlayerClosed" />

@code {

    public List<string> _selectedTags = new List<string>();
    public IEnumerable<string> SelectedTagValues
    {
        get
        {
            return this._selectedTags;
        }
        set
        {
            this._selectedTags = value.ToList();
            OnTagsChanged(this._selectedTags);
        }
    }

    public List<string> _selectedActresses = new List<string>();
    public IEnumerable<string> SelectedActressesValues
    {
        get
        {
            return this._selectedActresses;
        }
        set
        {
            this._selectedActresses = value.ToList();
            OnActressesChanged(this._selectedActresses);
        }
    }

    public async void GetSource(DbVideoItem item)
    {
        var foundVideo = await VideoService.GetVideoById(item.Id);
        if (foundVideo == null) return;

        VideoSource? source = null;
        source = await scraper.GetSource(foundVideo, context);
    }

    public int TotalItems { get { return this.FilteredItems.Count; } }

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 30;

    private List<DbVideoItem> VideoItems => VideoService.GetVideoItems().GetAwaiter().GetResult();
    private string _currentSortOption = "latest";

    private bool _showOnlyLiked;
    private bool _showOnlyUnwatched;
    private bool _showOnlyWithErrors;
    private Random rng = new Random();
    private List<DbVideoItem>? _cachedRandomItems = null;
    private string? _lastRandomSeed = null;

    public bool ShowOnlyLiked
    {
        get => _showOnlyLiked;
        set
        {
            if (_showOnlyLiked != value)
            {
                _showOnlyLiked = value;
                CurrentPage = 1; // Reset page on filter change
                _cachedRandomItems = null; // Clear cache on filter change
            }
        }
    }

    public bool ShowOnlyUnwatched
    {
        get => _showOnlyUnwatched;
        set
        {
            if (_showOnlyUnwatched != value)
            {
                _showOnlyUnwatched = value;
                CurrentPage = 1; // Reset page on filter change
                _cachedRandomItems = null; // Clear cache on filter change
            }
        }
    }

    public bool ShowOnlyWithErrors
    {
        get => _showOnlyWithErrors;
        set
        {
            if (_showOnlyWithErrors != value)
            {
                _showOnlyWithErrors = value;
                CurrentPage = 1; // Reset page on filter change
                _cachedRandomItems = null; // Clear cache on filter change
            }
        }
    }

    public string CurrentSortOption
    {
        get => _currentSortOption;
        set
        {
            if (_currentSortOption != value)
            {
                _currentSortOption = value;
                CurrentPage = 1; // Reset page on sort change
                
                // Clear random cache when switching away from random
                if (value != "random")
                {
                    _cachedRandomItems = null;
                    _lastRandomSeed = null;
                }
                // Generate new random seed when switching to random
                else if (value == "random")
                {
                    _lastRandomSeed = Guid.NewGuid().ToString();
                    _cachedRandomItems = null;
                }
            }
        }
    }

    private List<DbVideoItem> FilteredItems
    {
        get
        {
            // Use cached random items if in random mode and cache exists
            if (_currentSortOption == "random" && _cachedRandomItems != null)
            {
                return _cachedRandomItems;
            }
            
            var items = VideoItems;
            
            // Apply global tag blacklist
            var setting = SettingService.GetSetting("TagBlacklist").GetAwaiter().GetResult();
            var globalBlackList = JsonConvert.DeserializeObject<List<string>>(setting.Value);
            items = items.Where(item => !item.Tags.Exists(a => globalBlackList!.Any(b => b == a.Name))).ToList();
            
            // Apply filters
            var filteredItems = items
                .Where(v => (!_showOnlyLiked || v.Liked) &&
                        (!_showOnlyUnwatched || v.PlayCount == 0) &&
                        (!_showOnlyWithErrors || (v.ErrorCount ?? 0) > 0) &&
                        (SelectedTags.Count == 0 || SelectedTags.All(t => v.Tags.Any(a => a.Name == t))) &&
                        (SelectedActresses.Count == 0 || SelectedActresses.All(t => v.Stars.Any(a => a.Name == t))));

            // Apply sorting
            List<DbVideoItem> sortedItems;
            if (_currentSortOption == "random")
            {
                // Create stable random order using seed
                var seed = _lastRandomSeed?.GetHashCode() ?? 0;
                var seededRng = new Random(seed);
                sortedItems = filteredItems
                    .Select(v => new { Item = v, Order = seededRng.Next() })
                    .OrderByDescending(x => x.Order)
                    .Select(x => x.Item)
                    .ToList();
                    
                // Cache the random order
                _cachedRandomItems = sortedItems;
            }
            else
            {
                sortedItems = filteredItems
                    .OrderByDescending(v => _currentSortOption switch
                    {
                        "latest" => Convert.ToInt32(v.SiteVideoId),
                        "rating" => v.SiteRating ?? 0,
                        "playtime" => v.PlayDurationEst.TotalSeconds,
                        _ => Convert.ToInt32(v.SiteVideoId)
                    })
                    .ToList();
            }
            
            return sortedItems;
        }
    }

    private List<DbTag> AllTags { get { return this.AvailableTags.Select(x => x.Tag).ToList(); } }
    private List<DbStar> AllStars { get { return this.AvailableActresses.Select(x => x.Star).ToList(); } }

    private List<(DbTag Tag, long Count)> AvailableTags { get; set; } = new();
    private List<(DbStar Star, long Count)> AvailableActresses { get; set; } = new();

    private HashSet<string> SelectedTags { get; set; } = new();
    private HashSet<string> SelectedActresses { get; set; } = new();

    private List<DbVideoItem> PagedItems => FilteredItems.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();

    private int TotalPages => (int)Math.Ceiling(FilteredItems.Count / (double)PageSize);

    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private List<(DbTag Tag, long Count)> SortedTags => AvailableTags
        .OrderByDescending(t => SelectedTags.Contains(t.Tag.Name))
        .ThenBy(t => t.Tag.Name)
        .ToList();

    private List<(DbStar Star, long Count)> SortedActresses => AvailableActresses
        .OrderByDescending(a => SelectedActresses.Contains(a.Star.Name))
        .ThenBy(a => a.Star.Name)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadVideos();
        await LoadTags();
        await LoadActresses();
    }

    private async Task LoadVideos()
    {
        // Nur noch fÃ¼r das initiale Laden der Seite benÃ¶tigt
        CurrentPage = 1;
        StateHasChanged();
    }

    private async Task LoadTags()
    {
        AvailableTags = await this.VideoService.GetTagInfos();
    }

    private async Task LoadActresses()
    {
        AvailableActresses = await this.VideoService.GetActorInfos();
    }

    private void OnTagsChanged(IEnumerable<string> e)
    {
        SelectedTags = e.ToHashSet();
        CurrentPage = 1; // Reset page on filter change
        _cachedRandomItems = null; // Clear cache on filter change
    }

    private void OnActressesChanged(IEnumerable<string> e)
    {
        SelectedActresses = e.ToHashSet();
        CurrentPage = 1; // Reset page on filter change
        _cachedRandomItems = null; // Clear cache on filter change
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }
    }

    private void PageSizeChanged(ChangeEventArgs e)
    {
        if (e == null || e.Value == null) return;
        var val = e.Value.ToString();
        if (val == null) return;

        PageSize = int.Parse(val);
        CurrentPage = 1; // Reset page on page size change
    }

    private bool IsSelected(int size)
    {
        return PageSize == size;
    }

    private void AddTagFilter(string tagName)
    {
        var currentTags = _selectedTags.ToList();
        if (!currentTags.Contains(tagName))
        {
            currentTags.Add(tagName);
            SelectedTagValues = currentTags;
        }
    }

    private void AddStarFilter(string starName)
    {
        var currentStars = _selectedActresses.ToList();
        if (!currentStars.Contains(starName))
        {
            currentStars.Add(starName);
            SelectedActressesValues = currentStars;
        }
    }

    private void ClearTags()
    {
        SelectedTagValues = new List<string>();
    }

    private void ClearActresses()
    {
        SelectedActressesValues = new List<string>();
    }

    private async Task DeleteVideo(long videoId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this video?");
        if (!confirmed) return;

        await VideoService.DeleteVideo(videoId);

        // Hole das Video fÃ¼r die Tag- und Star-ZÃ¤hler Aktualisierung
        var videoToRemove = VideoItems.FirstOrDefault(v => v.Id == videoId);
        if (videoToRemove != null)
        {
            // Aktualisiere die Tag- und Star-ZÃ¤hler
            foreach (var tag in videoToRemove.Tags)
            {
                var tagInfo = AvailableTags.FirstOrDefault(t => t.Tag.Id == tag.Id);
                if (tagInfo.Count > 0)
                {
                    var index = AvailableTags.IndexOf(tagInfo);
                    AvailableTags[index] = (tagInfo.Tag, tagInfo.Count - 1);
                }
            }

            foreach (var star in videoToRemove.Stars)
            {
                var starInfo = AvailableActresses.FirstOrDefault(s => s.Star.Id == star.Id);
                if (starInfo.Count > 0)
                {
                    var index = AvailableActresses.IndexOf(starInfo);
                    AvailableActresses[index] = (starInfo.Star, starInfo.Count - 1);
                }
            }

            // Wenn die aktuelle Seite leer ist, gehe zur vorherigen Seite
            if (PagedItems.Count == 0 && CurrentPage > 1)
            {
                CurrentPage--;
            }

            // Erzwinge ein UI-Update
            StateHasChanged();
        }
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
        }
    }

    private VideoPlayer VideoPlayerComponent { get; set; }

    private async Task PlayVideo(DbVideoItem item)
    {
        if (VideoPlayerComponent != null)
        {
            await VideoPlayerComponent.ShowVideo(item);
        }
    }

    private void HandlePlayerClosed()
    {
        // Hier kÃ¶nntest du Aktionen ausfÃ¼hren, nachdem der Player geschlossen wurde
        // z.B. Aktualisieren des Play Count
    }

    private async Task ToggleLike(DbVideoItem item)
    {
        item.Liked = !item.Liked;

        // Like-Status in der Datenbank aktualisieren
        await VideoService.UpdateVideoLikeStatus(item.Id, item.Liked);

        StateHasChanged();
    }

    private async void HandleImageError(Microsoft.AspNetCore.Components.Web.ErrorEventArgs e, DbVideoItem item)
    {
        // ErrorEventArgs hat keine CurrentTarget-Eigenschaft
        // Stattdessen setzen wir den Thumbnail-Pfad direkt im item-Objekt
        item.Thumbnail = "/images/thumbnail-not-available.svg";
        item.IsThumbnailNotAvailable = true;

        // ErhÃ¶he den ErrorCount in der Datenbank und im Speicher
        await VideoService.UpdateVideoErrorCount(item.Id);

        StateHasChanged();
    }
}
