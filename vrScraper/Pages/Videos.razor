@page "/videos"

@using Newtonsoft.Json
@using vrScraper.DB
@using vrScraper.DB.Models
@using vrScraper.Services
@using Microsoft.EntityFrameworkCore

@inject IVideoService VideoService
@inject ISettingService SettingService
@inject IEpornerScraper scraper
@inject VrScraperContext context
@inject IJSRuntime JSRuntime
@inject IServiceProvider serviceProvider

@using Blzr.BootstrapSelect

<div style="min-height: 75vh; display: flex; flex-direction: column;">

    <div class="filters">
        <div class="filter-container">
            <div class="filter-section">
                <span class="filter-item">Total items: @TotalItems</span>

                <span class="filter-item">
                    <label for="sort">Sort by:</label>
                    <select class="form-select" @bind="CurrentSortOption" style="width: auto;">
                        <option value="latest">Latest</option>
                        <option value="rating">Rating</option>
                        <option value="random">Random</option>
                        <option value="playtime">Most played time</option>
                    </select>
                </span>

                <span class="filter-item">
                    <input class="form-check-input" type="checkbox" @bind="ShowOnlyLiked" id="showLikedCheck">
                    <label class="form-check-label" for="showLikedCheck">Show only liked</label>
                </span>

                <span class="filter-item">
                    <input class="form-check-input" type="checkbox" @bind="ShowOnlyUnwatched" id="showUnwatchedCheck">
                    <label class="form-check-label" for="showUnwatchedCheck">Show only unwatched</label>
                </span>

                <span class="filter-item">
                    <label for="tags">Tags:</label>
                    <div class="d-flex align-items-center gap-2">
                        <BootstrapSelect IsMultiple="true"
                                        TItem="(DbTag Tag, long Count)"
                                        Data="@SortedTags"
                                        TextField="@((item) => $"{item.Tag.Name} ({item.Count})")"
                                        ValueField="@((item) => item.Tag.Name)"
                                        ShowSearch="true"
                                        TType="IEnumerable<string>"
                                        @bind-Value="@SelectedTagValues" />
                        <button class="btn btn-sm btn-clear" @onclick="ClearTags" disabled="@(SelectedTags.Count == 0)" title="Clear tags">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                </span>

                <span class="filter-item">
                    <label for="actresses">Actresses:</label>
                    <div class="d-flex align-items-center gap-2">
                        <BootstrapSelect IsMultiple="true"
                                        TItem="(DbStar Star, long Count)"
                                        Data="@SortedActresses"
                                        TextField="@((item) => $"{item.Star.Name} ({item.Count})")"
                                        ValueField="@((item) => item.Star.Name)"
                                        ShowSearch="true"
                                        TType="IEnumerable<string>"
                                        @bind-Value="@SelectedActressesValues" />
                        <button class="btn btn-sm btn-clear" @onclick="ClearActresses" disabled="@(SelectedActresses.Count == 0)" title="Clear actresses">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                </span>
            </div>
        </div>
    </div>

    <div class="content-wrapper">
        <div class="pager">
            <button class="btn btn-primary me-2" @onclick="PreviousPage" disabled="@IsFirstPage">
                <i class="bi bi-chevron-left"></i> Previous
            </button>
            <button class="btn btn-primary" @onclick="NextPage" disabled="@IsLastPage">
                Next <i class="bi bi-chevron-right"></i>
            </button>
        </div>
        <div>
            <span>Page @CurrentPage of @TotalPages</span>
        </div>

        <div class="video-gallery">
            @foreach (var item in PagedItems)
            {
                <div class="video-item">
                    <div class="thumbnail-container">
                        <img src="@item.Thumbnail" alt="@item.Title" />
                        <div class="thumbnail-overlay">
                            <button class="btn btn-danger btn-sm delete-btn" @onclick="() => DeleteVideo(item.Id)" title="Delete video">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                    <h3>@item.Title</h3>
                    <div class="tag-container">
                        @if (item.Stars != null)
                        {
                            @foreach (var starInfo in item.Stars)
                            {
                                <button type="button" class="btn btn-primary star-pill" @onclick="() => AddStarFilter(starInfo.Name)">
                                    @starInfo.Name
                                </button>
                            }
                        }

                        @if (item.Tags != null)
                        {
                            @foreach (var tagInfo in item.Tags)
                            {
                                <button type="button" class="btn btn-primary tag-pill" @onclick="() => AddTagFilter(tagInfo.Name)">
                                    @tagInfo.Name
                                </button>
                            }
                        }
                    </div>
                </div>
            }
        </div>

        <div class="d-flex justify-content-between align-items-center footer">
            <div class="pager">
                <button class="btn btn-primary me-2" @onclick="PreviousPage" disabled="@IsFirstPage">
                    <i class="bi bi-chevron-left"></i> Previous
                </button>
                <button class="btn btn-primary" @onclick="NextPage" disabled="@IsLastPage">
                    Next <i class="bi bi-chevron-right"></i>
                </button>
            </div>
            <div>
                <span>Page @CurrentPage of @TotalPages</span>
            </div>
            <div>
                <select class="form-select" @onchange="PageSizeChanged" style="width: auto;">
                    <option value="10" selected="@IsSelected(10)">10</option>
                    <option value="20" selected="@IsSelected(20)">20</option>
                    <option value="30" selected="@IsSelected(30)">30</option>
                    <option value="40" selected="@IsSelected(40)">40</option>
                    <option value="50" selected="@IsSelected(50)">50</option>
                    <option value="100" selected="@IsSelected(100)">100</option>
                </select>
            </div>
        </div>
    </div>
</div>

@code {

    public List<string> _selectedTags = new List<string>();
    public IEnumerable<string> SelectedTagValues
    {
        get
        {
            return this._selectedTags;
        }
        set
        {
            this._selectedTags = value.ToList();
            OnTagsChanged(this._selectedTags);
        }
    }

    public List<string> _selectedActresses = new List<string>();
    public IEnumerable<string> SelectedActressesValues
    {
        get
        {
            return this._selectedActresses;
        }
        set
        {
            this._selectedActresses = value.ToList();
            OnActressesChanged(this._selectedActresses);
        }
    }

    public async void GetSource(DbVideoItem item)
    {
        var foundVideo = await VideoService.GetVideoById(item.Id);
        if (foundVideo == null) return;

        VideoSource? source = null;
        source = await scraper.GetSource(foundVideo, context);
    }

    public int TotalItems { get { return this.FilteredItems.Count; } }

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 30;

    private List<DbVideoItem> VideoItems = new List<DbVideoItem>();
    private string CurrentSortOption { get; set; } = "latest";

    private bool ShowOnlyLiked { get; set; } = false;
    private bool ShowOnlyUnwatched { get; set; } = false;
    private Random rng = new Random();

    private List<DbVideoItem> FilteredItems => VideoItems
        .Where(v => (!ShowOnlyLiked || v.Liked) &&
                    (!ShowOnlyUnwatched || v.PlayCount == 0) &&
                    (SelectedTags.Count == 0 || SelectedTags.All(t => v.Tags.Any(a => a.Name == t))) &&
                    (SelectedActresses.Count == 0 || SelectedActresses.All(t => v.Stars.Any(a => a.Name == t))))
        .OrderByDescending(v => CurrentSortOption switch
        {
            "latest" => v.Id,
            "rating" => v.SiteRating ?? 0,
            "random" => rng.Next(), // ZufÃ¤llige Sortierung
            "playtime" => v.PlayDurationEst.TotalSeconds,
            _ => v.Id
        })
        .ToList();

    private List<DbTag> AllTags { get { return this.AvailableTags.Select(x => x.Tag).ToList(); } }
    private List<DbStar> AllStars { get { return this.AvailableActresses.Select(x => x.Star).ToList(); } }

    private List<(DbTag Tag, long Count)> AvailableTags { get; set; } = new();
    private List<(DbStar Star, long Count)> AvailableActresses { get; set; } = new();

    private HashSet<string> SelectedTags { get; set; } = new();
    private HashSet<string> SelectedActresses { get; set; } = new();

    private List<DbVideoItem> PagedItems => FilteredItems.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();

    private int TotalPages => (int)Math.Ceiling(FilteredItems.Count / (double)PageSize);

    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private List<(DbTag Tag, long Count)> SortedTags => AvailableTags
        .OrderByDescending(t => SelectedTags.Contains(t.Tag.Name))
        .ThenBy(t => t.Tag.Name)
        .ToList();

    private List<(DbStar Star, long Count)> SortedActresses => AvailableActresses
        .OrderByDescending(a => SelectedActresses.Contains(a.Star.Name))
        .ThenBy(a => a.Star.Name)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadVideos();
        await LoadTags();
        await LoadActresses();
    }

    private async Task LoadVideos()
    {
        VideoItems = await VideoService.GetVideoItems();

        //global tag blacklist
        var setting = await SettingService.GetSetting("TagBlacklist");
        var globalBlackList = JsonConvert.DeserializeObject<List<string>>(setting.Value);
        VideoItems = VideoItems.Where(item => !item.Tags.Exists(a => globalBlackList!.Any(b => b == a.Name))).ToList();

        CurrentPage = 1; // Nach dem Laden der Videos zur ersten Seite wechseln
    }

    private async Task LoadTags()
    {
        AvailableTags = await this.VideoService.GetTagInfos();
    }

    private async Task LoadActresses()
    {
        AvailableActresses = await this.VideoService.GetActorInfos();
    }

    private void OnTagsChanged(IEnumerable<string> e)
    {
        SelectedTags = e.ToHashSet();
        CurrentPage = 1;
    }

    private void OnActressesChanged(IEnumerable<string> e)
    {
        SelectedActresses = e.ToHashSet();
        CurrentPage = 1;
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }
    }

    private void PageSizeChanged(ChangeEventArgs e)
    {
        if (e == null || e.Value == null) return;
        var val = e.Value.ToString();
        if (val == null) return;


        PageSize = int.Parse(val);
        CurrentPage = 1; // Zur ersten Seite wechseln, wenn die PageSize geÃ¤ndert wird
    }

    private bool IsSelected(int size)
    {
        return PageSize == size;
    }

    private void AddTagFilter(string tagName)
    {
        var currentTags = _selectedTags.ToList();
        if (!currentTags.Contains(tagName))
        {
            currentTags.Add(tagName);
            SelectedTagValues = currentTags;
        }
    }

    private void AddStarFilter(string starName)
    {
        var currentStars = _selectedActresses.ToList();
        if (!currentStars.Contains(starName))
        {
            currentStars.Add(starName);
            SelectedActressesValues = currentStars;
        }
    }

    private void ClearTags()
    {
        SelectedTagValues = new List<string>();
    }

    private void ClearActresses()
    {
        SelectedActressesValues = new List<string>();
    }

    private async Task DeleteVideo(long videoId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this video?");
        if (!confirmed) return;

        await VideoService.DeleteVideo(videoId);

        // Aktualisiere die Listen
        await LoadVideos();
        await LoadTags();
        await LoadActresses();

        // Wenn die aktuelle Seite jetzt leer ist, gehe zur vorherigen Seite
        if (PagedItems.Count == 0 && CurrentPage > 1)
        {
            CurrentPage--;
        }
    }
}

<style>
    /* Dropdown Styles */
    ::deep .bootstrap-select {
        position: relative !important;
    }

    ::deep .bootstrap-select .dropdown-menu {
        position: absolute !important;
        font-size: 14px;
        padding: 4px;
        max-height: 400px;
        overflow-y: auto;
        width: auto;
        min-width: 200px;
        z-index: 9999;
        transform: none !important;
        top: 100% !important;
        left: 0 !important;
    }

    ::deep .bootstrap-select .dropdown-menu::-webkit-scrollbar {
        width: 6px;
    }

    ::deep .bootstrap-select .dropdown-menu::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }

    ::deep .bootstrap-select .dropdown-menu::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }

    ::deep .bootstrap-select .dropdown-menu::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    ::deep .bootstrap-select .dropdown-item {
        padding: 6px 12px;
        white-space: normal;
        word-break: break-word;
    }

    .filters {
        margin-bottom: 20px;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 8px;
        width: 100%;
        position: relative;
        z-index: 1000;
    }

    .filter-container {
        width: 100%;
        position: relative;
        z-index: 1000;
    }

    .filter-section {
        display: flex;
        align-items: center;
        gap: 15px;
        flex-wrap: nowrap;
        min-width: 100%;
        position: relative;
        z-index: 1000;
    }

    .filter-item {
        display: flex;
        align-items: center;
        gap: 8px;
        white-space: nowrap;
        flex-shrink: 0;
        position: relative;
    }

    .filter-item label {
        margin: 0;
        color: #495057;
        font-size: 14px;
    }

    .filter-item select.form-select,
    .filter-item ::deep .dropdown-toggle,
    .filter-item button {
        background-color: white;
        border: 1px solid #ced4da;
        border-radius: 4px;
        padding: 4px 8px;
        font-size: 14px;
        height: 32px;
        color: #212529;
        display: flex;
        align-items: center;
    }

    .filter-item select.form-select,
    .filter-item ::deep .dropdown-toggle {
        min-width: 140px;
    }

    .filter-item button {
        gap: 4px;
        white-space: nowrap;
    }

    .filter-item button i {
        font-size: 12px;
    }

    .filter-item .form-check-input {
        margin: 0;
        width: 16px;
        height: 16px;
    }

    .filter-item ::deep .dropdown-toggle {
        display: flex;
        align-items: center;
        justify-content: space-between;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .content-wrapper {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 20px;
        margin-bottom: 20px;
    }

    .video-gallery {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 10px;
        min-height: 0;  /* Verhindert Overflow */
    }

    .video-item {
        text-align: center;
    }

        .video-item img {
            width: 100%;
            height: auto;
            display: block;
            margin: 0 auto;
        }

        .video-item h3 {
            font-size: 14px;
            margin-top: 5px;
            color: #333;
        }

    .pagination {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 20px;
    }

        .pagination select {
            margin-left: 10px;
        }


    .tag-container {
        display: flex;
        flex-wrap: wrap;
        gap: 2px;
        padding: 2px 0;
        justify-content: center;
    }

    .tag-pill, .star-pill {
        cursor: pointer;
        border: none;
        transition: all 0.2s ease-in-out;
        padding: 2px 6px;
        border-radius: 8px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-size: 10px;
        font-weight: 500;
        text-transform: capitalize;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        line-height: 1;
        min-height: 18px;
    }

    .tag-pill:hover, .star-pill:hover {
        opacity: 1;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.15);
    }

    .tag-pill {
        background-color: #0d6efd;
        color: white;
    }

    .tag-pill:hover {
        background-color: #0b5ed7;
    }

    .star-pill {
        background-color: #e83e8c;
        color: white;
    }

    .star-pill:hover {
        background-color: #d63384;
    }

    .footer {
        margin-top: 16px;
    }

    .btn-clear {
        padding: 4px;
        height: 24px;
        width: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: rgba(108, 117, 125, 0.1);
        border: none;
        color: #6c757d;
    }

    .btn-clear:hover:not(:disabled) {
        background-color: rgba(108, 117, 125, 0.2);
        color: #495057;
    }

    .btn-clear:disabled {
        opacity: 0.4;
        cursor: not-allowed;
    }

    .btn-clear i {
        font-size: 12px;
    }

    .thumbnail-container {
        position: relative;
        overflow: hidden;
    }

    .thumbnail-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: flex-end;
        align-items: flex-start;
        opacity: 0;
        transition: opacity 0.2s ease-in-out;
        padding: 8px;
    }

    .thumbnail-container:hover .thumbnail-overlay {
        opacity: 1;
    }

    .delete-btn {
        padding: 6px;
        height: 28px;
        width: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #dc3545;
        border: none;
        color: white;
        border-radius: 50%;
    }

    .delete-btn:hover {
        background-color: #bb2d3b;
        color: white;
    }

    .delete-btn i {
        font-size: 14px;
    }
</style>
