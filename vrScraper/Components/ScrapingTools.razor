@using vrScraper.Services
@inject IEpornerScraper Scraper

<h4>
    Scrape eporner.com
</h4>

<div class="scraper">
    <div class="pe-2">
        <label for="startPage">Start Page:</label>
        <InputNumber @bind-Value="startPage" id="startPage" class="form-control" style="width: 80px;" />
    </div>
    <div class="pe-2">
        <label for="count">Pages:</label>
        <InputNumber @bind-Value="count" id="count" class="form-control" style="width: 80px;" />
    </div>
    <div class="pe-2">
        <button class="btn btn-primary" @onclick="Scrape">Scrape</button>
    </div>

    <div class="pe-2">
        <button class="btn btn-primary" @onclick="Rescrape">Rescrape</button>
    </div>

    <div class="pe-2">
        <button class="btn btn-primary" @onclick="RemoveDead">Check Dead Thumbnails</button>
    </div>

    <div class="pe-2">
        <button class="btn btn-danger" @onclick="DeleteErrorItems">Delete Items With Errors</button>
    </div>
</div>

@if (scrapingStatus != string.Empty)
{
    <div class="status mt-2 ms-4">
        <p>Status: @scrapingStatus</p>
    </div>
}

@code {
    private int startPage = 1;
    private int count = 5;
    private string scrapingStatus = string.Empty;
    private Timer? timer;

    protected override void OnInitialized()
    {
        timer = new Timer(UpdateScrapingStatus, null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
    }

    private void Scrape(MouseEventArgs e)
    {
        this.Scraper.StartScraping(startPage, count);
        scrapingStatus = "Starting...";
        StartStatusUpdates();
    }

    private void Rescrape(MouseEventArgs e)
    {
        this.Scraper.ReparseInformations();
    }

    private void RemoveDead(MouseEventArgs e)
    {
        this.Scraper.StartRemoveByDeadPicture();
        scrapingStatus = "Starting...";
        StartStatusUpdates();
    }

    private void DeleteErrorItems(MouseEventArgs e)
    {
        this.Scraper.StartDeleteErrorItems();
        scrapingStatus = "Starting...";
        StartStatusUpdates();
    }

    private void StartStatusUpdates()
    {
        timer?.Change(TimeSpan.Zero, TimeSpan.FromMilliseconds(500));
    }

    private void StopStatusUpdates()
    {
        timer?.Change(Timeout.Infinite, Timeout.Infinite);
    }

    private void UpdateScrapingStatus(object? state)
    {
        scrapingStatus = Scraper.ScrapingStatus;

        if (!Scraper.ScrapingInProgress)
        {
            StopStatusUpdates();
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}

<style>
    .scraper {
        display: flex;
        align-items: flex-end;
        flex-wrap: wrap;
        gap: 8px;
    }

    .status {
        color: #666;
        font-style: italic;
    }
</style>
