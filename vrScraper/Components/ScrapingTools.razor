@using vrScraper.Services
@inject IEpornerScraper Scraper

<h4>
    Scrape eporner.com
</h4>

<div class="scraper">
    <div class="pe-2">
        <label for="startPage">Start Page:</label>
        <InputNumber @bind-Value="startPage" id="startPage" class="form-control input-width-small" disabled="@Scraper.ScrapingInProgress" />
    </div>
    <div class="pe-2">
        <label for="count">Pages:</label>
        <InputNumber @bind-Value="count" id="count" class="form-control input-width-small" disabled="@Scraper.ScrapingInProgress" />
    </div>
    <div class="pe-2">
        <button class="btn btn-primary" @onclick="Scrape" disabled="@Scraper.ScrapingInProgress">Scrape</button>
    </div>

    <div class="pe-2">
        <button class="btn btn-primary" @onclick="Rescrape" disabled="@Scraper.ScrapingInProgress">Rescrape</button>
    </div>

    <div class="pe-2">
        <button class="btn btn-primary" @onclick="RemoveDead" disabled="@Scraper.ScrapingInProgress">Check Dead Thumbnails</button>
    </div>

    <div class="pe-2">
        <button class="btn btn-danger" @onclick="DeleteErrorItems" disabled="@Scraper.ScrapingInProgress">Delete Items With Errors</button>
    </div>

    <div class="pe-2">
        <button class="btn btn-warning stop-button" @onclick="StopScraping" disabled="@(!Scraper.ScrapingInProgress)">
            <i class="bi bi-stop-fill"></i> Stop
        </button>
    </div>
</div>

@if (scrapingStatus != string.Empty)
{
    <div class="status-container mt-3">
        <div class="card">
            <div class="card-header bg-info text-white">
                <i class="bi bi-info-circle"></i> Status
            </div>
            <div class="card-body">
                <div class="progress progress-height mb-2">
                    @if (GetProgressPercentage() > 0)
                    {
                        <div class="progress-bar progress-bar-striped progress-bar-animated"
                             role="progressbar"
                             style="width: @(GetProgressPercentage())%"
                             aria-valuenow="@GetProgressPercentage()"
                             aria-valuemin="0"
                             aria-valuemax="100">
                            @GetProgressPercentage()%
                        </div>
                    }
                    else
                    {
                        <div class="progress-bar progress-bar-striped progress-bar-animated progress-full"
                             role="progressbar"
                             aria-valuenow="100"
                             aria-valuemin="0"
                             aria-valuemax="100">
                            In Bearbeitung...
                        </div>
                    }
                </div>
                <p class="status-text mb-0">@scrapingStatus</p>

                @if (!string.IsNullOrEmpty(Scraper.CurrentVideoThumbnail) && !string.IsNullOrEmpty(Scraper.CurrentVideoTitle))
                {
                    <div class="current-video-preview mt-3">
                        <div class="d-flex align-items-center">
                            <div class="thumbnail-container me-3">
                                <img src="@GetSafeThumbnailUrl(Scraper.CurrentVideoThumbnail)" 
                                     alt="@Scraper.CurrentVideoTitle" 
                                     class="thumbnail-preview"
                                     @onerror="HandleThumbnailError" />
                            </div>
                            <div class="video-info">
                                <div class="video-title">@Scraper.CurrentVideoTitle</div>
                                <div class="video-status">Currently processing...</div>
                            </div>
                        </div>
                    </div>
                }

                @if (GetStatsFromStatus().success > 0 || GetStatsFromStatus().dead > 0 || GetStatsFromStatus().errors > 0)
                {
                    <div class="stats-container mt-3">
                        <div class="stat-item bg-success">
                            <i class="bi bi-check-circle"></i> OK: @GetStatsFromStatus().success
                        </div>
                        <div class="stat-item bg-danger">
                            <i class="bi bi-exclamation-triangle"></i> Dead: @GetStatsFromStatus().dead
                        </div>
                        <div class="stat-item bg-warning">
                            <i class="bi bi-exclamation-circle"></i> Errors: @GetStatsFromStatus().errors
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private int startPage = 1;
    private int count = 5;
    private string scrapingStatus = string.Empty;
    private Timer? timer;

    protected override void OnInitialized()
    {
        timer = new Timer(UpdateScrapingStatus, null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
    }

    private void Scrape(MouseEventArgs e)
    {
        // Set scraping options before starting
        this.Scraper.IsScheduledScraping = false; // This is manual scraping
        
        this.Scraper.StartScraping(startPage, count);
        scrapingStatus = "Starting...";
        StartStatusUpdates();
    }

    private void Rescrape(MouseEventArgs e)
    {
        // Reset scraping options for rescrape (no stopping at known videos)
        this.Scraper.IsScheduledScraping = false;
        
        this.Scraper.StartReparseInformations();
        scrapingStatus = "Starting...";
        StartStatusUpdates();
    }

    private void RemoveDead(MouseEventArgs e)
    {
        // Reset scraping options
        this.Scraper.IsScheduledScraping = false;
        
        this.Scraper.StartRemoveByDeadPicture();
        scrapingStatus = "Starting...";
        StartStatusUpdates();
    }

    private void DeleteErrorItems(MouseEventArgs e)
    {
        // Reset scraping options
        this.Scraper.IsScheduledScraping = false;
        
        this.Scraper.StartDeleteErrorItems();
        scrapingStatus = "Starting...";
        StartStatusUpdates();
    }

    private void StopScraping(MouseEventArgs e)
    {
        this.Scraper.StopScraping();
        
        // Reset scraping options when manually stopping
        this.Scraper.IsScheduledScraping = false;
    }

    private void StartStatusUpdates()
    {
        timer?.Change(TimeSpan.Zero, TimeSpan.FromMilliseconds(500));
    }

    private void StopStatusUpdates()
    {
        timer?.Change(Timeout.Infinite, Timeout.Infinite);
    }

    private void UpdateScrapingStatus(object? state)
    {
        scrapingStatus = Scraper.ScrapingStatus;

        if (!Scraper.ScrapingInProgress)
        {
            StopStatusUpdates();
        }

        InvokeAsync(StateHasChanged);
    }

    private int GetProgressPercentage()
    {
        if (string.IsNullOrEmpty(scrapingStatus))
            return 0;

        // Check if status contains a percentage pattern like "5/100 (5.0%)"
        var match = System.Text.RegularExpressions.Regex.Match(scrapingStatus, @"(\d+)/(\d+)");
        if (match.Success && match.Groups.Count >= 3)
        {
            if (int.TryParse(match.Groups[1].Value, out int current) &&
                int.TryParse(match.Groups[2].Value, out int total) &&
                total > 0)
            {
                return (int)Math.Round((double)current / total * 100);
            }
        }

        // Try to parse direct percentage
        match = System.Text.RegularExpressions.Regex.Match(scrapingStatus, @"(\d+(\.\d+)?)%");
        if (match.Success)
        {
            if (double.TryParse(match.Groups[1].Value, out double percentage))
            {
                return (int)Math.Round(percentage);
            }
        }

        return 0;
    }

    private (int success, int dead, int errors) GetStatsFromStatus()
    {
        if (string.IsNullOrEmpty(scrapingStatus))
            return (0, 0, 0);

        int success = 0, dead = 0, errors = 0;

        // Try to parse "Ok: X, Dead: Y, Errors: Z" pattern
        var okMatch = System.Text.RegularExpressions.Regex.Match(scrapingStatus, @"Ok: (\d+)");
        var deadMatch = System.Text.RegularExpressions.Regex.Match(scrapingStatus, @"Dead: (\d+)");
        var errorsMatch = System.Text.RegularExpressions.Regex.Match(scrapingStatus, @"Errors: (\d+)");

        if (okMatch.Success)
            int.TryParse(okMatch.Groups[1].Value, out success);

        if (deadMatch.Success)
            int.TryParse(deadMatch.Groups[1].Value, out dead);

        if (errorsMatch.Success)
            int.TryParse(errorsMatch.Groups[1].Value, out errors);

        return (success, dead, errors);
    }

    private string GetSafeThumbnailUrl(string thumbnailUrl)
    {
        if (string.IsNullOrEmpty(thumbnailUrl) || thumbnailUrl == "/images/thumbnail-not-available.svg")
        {
            return "/images/thumbnail-not-available.svg";
        }
        return thumbnailUrl;
    }

    private void HandleThumbnailError(ErrorEventArgs e)
    {
        // This will be called if the thumbnail fails to load
        // We could implement additional error handling here if needed
        Console.WriteLine($"Thumbnail failed to load: {e}");
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}

